#N canvas 364 58 893 602 12;
#X declare -path else;
#X obj 40 305 osc~ 400;
#X obj 262 306 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 0 1;
#X obj 259 332 nbx 5 16 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 12
-228856 -1 -1 0 256;
#X text 332 332 Posição (0-1);
#X floatatom 614 215 5 0 0 0 - - -;
#X obj 617 193 hsl 128 15 -1 1 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 0 1;
#X obj 369 396 v pi;
#X obj 550 197 noise~;
#X obj 369 370 pi;
#X obj 550 231 pan2~;
#X obj 190 441 out~;
#X obj 40 438 meter2~;
#X obj 539 271 out~;
#X obj 40 348 expr~ $v1 * cos($v2 * pi/2) \; $v1 * sin($v2 * pi/2)
;
#X obj 326 474 setdsp~ 1;
#X text 38 58 "Panning" or just "pan" distributes a mono signal into
a stereo field. The "pan" control allows you to distribute a sound
source more to the right or to the left., f 56;
#X text 38 105 This is rather similar to crossfading \, but instead
of mixing two sound sources into an output \, we kinda do the opposite.
Check the implementation below and see how the process depends on a
same structure than the crossfading \, and how we also adopt the sine/cosine
functions., f 56;
#X text 225 306 left;
#X text 397 305 right;
#X text 37 198 Since we have a Sine/Coine function \, we have an "Equal
Power Panning". Similarly than the equal power crossfade \, at the
middle point \, we have a -3 dB attenuation for both channels., f
56;
#X text 695 167 middle point;
#X obj 614 168 initmess 0;
#X text 362 278 middle point;
#X obj 259 283 initmess 0.5;
#X floatatom 662 446 5 0 0 0 - - -;
#X floatatom 731 445 5 0 0 0 - - -;
#X obj 594 497 env~;
#X obj 639 497 env~;
#X obj 685 497 env~;
#X obj 731 497 env~;
#X obj 731 522 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 594 388 noise~;
#X obj 685 522 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 639 521 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 594 521 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 638 538 left;
#X text 638 552 front;
#X text 684 551 front;
#X text 684 537 right;
#X text 592 538 left;
#X text 731 537 right;
#X text 593 552 back;
#X text 732 551 back;
#X text 647 444 X;
#X text 711 445 Y;
#X obj 662 349 slider2d -size 64 -range -1 1;
#X text 458 62 The [pan2~] object \, from the ELSE library \, is the
same as the implementation below to the left \, but the pan parameter
is from -1 to 1 (instead of 0 to 1). This makes it more suitable for
controlling it with audio signals. Check also the [pan4~] object \,
which is a 4 speakers panning object.;
#X obj 662 421 unpack f f;
#X obj 259 359 f2s~ 20;
#X obj 614 238 f2s~ 20;
#X obj 594 470 pan4~, f 20;
#X obj 675 24 declare -path else;
#X connect 0 0 13 0;
#X connect 1 0 2 0;
#X connect 2 0 48 0;
#X connect 4 0 49 0;
#X connect 5 0 4 0;
#X connect 7 0 9 0;
#X connect 8 0 6 0;
#X connect 9 0 12 0;
#X connect 9 1 12 1;
#X connect 13 0 10 0;
#X connect 13 0 11 0;
#X connect 13 1 10 1;
#X connect 13 1 11 1;
#X connect 21 0 5 0;
#X connect 23 0 1 0;
#X connect 24 0 50 1;
#X connect 25 0 50 2;
#X connect 26 0 34 0;
#X connect 27 0 33 0;
#X connect 28 0 32 0;
#X connect 29 0 30 0;
#X connect 31 0 50 0;
#X connect 45 0 47 0;
#X connect 47 0 24 0;
#X connect 47 1 25 0;
#X connect 48 0 13 1;
#X connect 49 0 9 1;
#X connect 50 0 26 0;
#X connect 50 1 27 0;
#X connect 50 2 28 0;
#X connect 50 3 29 0;
