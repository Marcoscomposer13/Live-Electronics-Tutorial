#N canvas 616 62 584 629 12;
#X declare -path else;
#X obj 155 247 nbx 5 14 -1e+37 1e+37 0 0 bkjhgk hfjhgd empty 0 -8 0
10 -228856 -1 -1 0 256;
#X obj 210 376 *~;
#X text 132 246 Hz;
#X obj 228 257 nbx 5 14 -100 0 0 0 empty db empty 0 -8 0 10 -228856
-1 -1 0 256;
#X obj 231 230 hsl 128 15 -100 0 0 0 empty db empty -2 -8 0 10 -228856
-1 -1 0 1;
#X obj 155 271 osc~ 440;
#X obj 228 310 nbx 6 16 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 11
-228856 -1 -1 0 256;
#X text 288 257 dBFS;
#X obj 228 280 db2lin;
#X obj 210 425 meter~;
#X obj 210 584 dac~;
#X obj 286 419 graph~;
#X text 306 311 Linear Amplitude;
#X text 42 311 Oscillator (values between -1 e 1) ==>, f 19;
#X obj 228 337 float2sig~ 50;
#X text 238 376 Multiply between 0-1 to adjust gain!;
#X obj 390 17 declare -path else;
#X text 326 338 smoothened audio signal;
#X text 36 58 If we multiply the output of an oscillator to values
between 0 and 1 \, we have a gain adjustment that goes from silence
(multiply by 0) to the original input (multiply by 1). If we multiply
it by values greater than one \, we increase the original gain \, which
can lead to clipping distortion., f 72;
#X text 36 140 Since our perception is non linear \, we can adopt a
logarithmic scale to adjust the gain \, such as with [db2lin] below.
The [float2sig~] object is also needed to smoothen the signal \, as
gain changes cannot be abrupt because it generates audible clicks.
, f 72;
#X connect 0 0 5 0;
#X connect 1 0 9 0;
#X connect 1 0 11 0;
#X connect 3 0 8 0;
#X connect 4 0 3 0;
#X connect 5 0 1 0;
#X connect 6 0 14 0;
#X connect 8 0 6 0;
#X connect 9 0 10 0;
#X connect 9 0 10 1;
#X connect 14 0 1 1;
