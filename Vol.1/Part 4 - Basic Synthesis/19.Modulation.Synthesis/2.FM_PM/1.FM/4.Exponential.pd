#N canvas 419 57 485 522 12;
#X obj 146 441 out~;
#X obj 160 397 sine~;
#X obj 160 329 +~;
#X obj 160 363 mtof~;
#X obj 110 174 nbx 5 14 24 90 0 0 empty \$0-carrier empty 0 -8 0 10
-228856 -1 -1 60 256;
#X obj 110 201 f2s~ 10;
#X obj 178 260 sine~;
#X obj 178 293 *~;
#X obj 234 260 nbx 5 14 -1e+37 1e+37 0 0 empty \$0-index empty 0 -8
0 10 -228856 -1 -1 28 256;
#X obj 234 285 f2s~ 10;
#X obj 178 232 mtof~;
#X text 105 151 Carrier;
#X text 233 238 Index;
#X obj 178 174 nbx 5 14 24 90 0 0 empty \$0-mod empty 0 -8 0 10 -228856
-1 -1 34 256;
#X obj 178 201 f2s~ 10;
#X text 181 151 Mod.;
#X text 37 17 It's also possible to work with exponential MIDI pitch
values rather than a linear frequency input. Note that the difference
here is that the frequency deviation (that is \, the modulation index)
is now in semitones \, not hertz!;
#X obj 240 343 initmess \; \$0-carrier 60 \; \$0-mod 34 \; \$0-index
28;
#X text 240 172 (pithes are MIDI values).;
#X text 37 85 This does change the overall modulating signal \, so
we have a distinct behaviour and result. The main difference in the
patch is to just use [mtof~] to convert to hertz!, f 58;
#X connect 1 0 0 0;
#X connect 1 0 0 1;
#X connect 2 0 3 0;
#X connect 3 0 1 0;
#X connect 4 0 5 0;
#X connect 5 0 2 0;
#X connect 6 0 7 0;
#X connect 7 0 2 1;
#X connect 8 0 9 0;
#X connect 9 0 7 1;
#X connect 10 0 6 0;
#X connect 13 0 14 0;
#X connect 14 0 10 0;
