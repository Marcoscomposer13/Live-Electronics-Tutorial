#N canvas 86 37 1040 693 12;
#X msg 376 258 1;
#X obj 225 230 trigger bang bang bang;
#X msg 300 259 2;
#X msg 225 259 3;
#X obj 300 300 print ORDER;
#X msg 133 274 1;
#X msg 97 274 2;
#X msg 61 274 3;
#X obj 97 308 print ORDER;
#X msg 97 227 bang;
#X msg 225 191 bang;
#X obj 160 500 swap;
#X floatatom 191 471 3 0 0 0 - - -, f 3;
#X floatatom 160 471 3 0 0 0 - - -, f 3;
#X obj 160 576 /;
#X floatatom 191 536 3 0 0 0 - - -, f 3;
#X floatatom 160 535 3 0 0 0 - - -, f 3;
#X floatatom 328 474 5 0 0 0 - - -, f 5;
#X floatatom 266 474 5 0 0 0 - - -, f 5;
#X floatatom 389 579 5 0 0 0 - - -, f 5;
#X floatatom 266 580 5 0 0 0 - - -, f 5;
#X obj 266 549 float;
#X obj 266 506 trigger bang float;
#X floatatom 160 609 0 0 0 0 - - -;
#X text 248 609 The [swap] object implemented with [trigger] & [float]
, f 29;
#X text 49 474 swapping the output order:, f 13;
#X msg 518 184 1;
#X obj 518 210 trigger float float;
#X obj 648 238 trigger float float;
#X obj 648 270 + 1;
#X obj 950 303 + 1;
#X obj 950 334 + 1;
#X obj 950 364 + 1;
#X obj 950 394 + 1;
#X obj 864 303 + 1;
#X obj 864 334 + 1;
#X obj 864 364 + 1;
#X obj 778 303 + 1;
#X obj 778 334 + 1;
#X obj 725 435 print Sequence;
#X obj 778 267 trigger float float float;
#X text 558 182 <= depth first;
#X msg 727 572 1 \, 2 \, 3 \, 4 \, five \, six \, 7;
#X obj 727 608 print Several_Messages;
#X text 32 21 Pd's Hot/Cold structure demands an order where things
need to first reach the rightmost inlets (cold) and then the leftmost
(hot) one. Hence \, most objects output data via its outlets in a right
to left order. The [trigger] object is crucial control the order of
messages in Pd and illustrate this. Below \, to the left \, a bang
message activates three messages \, but the order is undefined. On
the right we use [trigger] to define the order from right to left \,
as its outlets output data in the right to left order. The arguments
of [trigger] define the number of outlets and its data type., f 61
;
#X text 56 193 Undefined order;
#X text 266 191 Defined with trigger;
#X text 34 352 You may need to invert the data order in your patch
with [swap] \, which also has a cold and hot inlet \, but the output
is inverted - where the left (hot) input is sent out the right outlet
first \, and the value sent to the right (cold) is sent out later to
the left inlet.;
#X text 510 24 The flow of data in Pd is executed in depth first fashion.
This means that whenever there is a new branch of data \, Pd will reach
the end of the branch before moving to the next. See the example below
\, where the [trigger] object makes the input data (the number 1) go
first to the rightmost outlet \, then to the next rightmost outlet
of the next [trigger] object and then again to the last [trigger] rightmost
outlet. Once it reaches that branch \, the data needs to go to the
end of the chain and into the [print] object before it moves on to
the next output of the [trigger] object and so on., f 69;
#X text 589 497 Now \, let it be clear that messages separated by commas
are sent in the left to right order \, as common sense would predict.
, f 48;
#X connect 0 0 4 0;
#X connect 1 0 3 0;
#X connect 1 1 2 0;
#X connect 1 2 0 0;
#X connect 2 0 4 0;
#X connect 3 0 4 0;
#X connect 5 0 8 0;
#X connect 6 0 8 0;
#X connect 7 0 8 0;
#X connect 9 0 6 0;
#X connect 9 0 5 0;
#X connect 9 0 7 0;
#X connect 10 0 1 0;
#X connect 11 0 16 0;
#X connect 11 1 15 0;
#X connect 12 0 11 1;
#X connect 13 0 11 0;
#X connect 14 0 23 0;
#X connect 15 0 14 1;
#X connect 16 0 14 0;
#X connect 17 0 21 1;
#X connect 18 0 22 0;
#X connect 21 0 20 0;
#X connect 22 0 21 0;
#X connect 22 1 19 0;
#X connect 26 0 27 0;
#X connect 27 0 39 0;
#X connect 27 1 28 0;
#X connect 28 0 29 0;
#X connect 28 1 40 0;
#X connect 29 0 39 0;
#X connect 30 0 31 0;
#X connect 31 0 32 0;
#X connect 32 0 33 0;
#X connect 33 0 39 0;
#X connect 34 0 35 0;
#X connect 35 0 36 0;
#X connect 36 0 39 0;
#X connect 37 0 38 0;
#X connect 38 0 39 0;
#X connect 40 0 37 0;
#X connect 40 1 34 0;
#X connect 40 2 30 0;
#X connect 42 0 43 0;
