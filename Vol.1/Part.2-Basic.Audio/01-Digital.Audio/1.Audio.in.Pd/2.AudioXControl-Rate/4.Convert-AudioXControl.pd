#N canvas 219 62 1147 624 12;
#X obj 136 508 vsnapshot~;
#X obj 239 508 snapshot~;
#X obj 241 154 osc~ 440;
#X floatatom 140 221 0 0 0 0 - - -;
#X obj 140 194 snapshot~;
#X obj 140 152 metro 200;
#X obj 140 129 loadbang;
#X floatatom 241 221 0 0 0 0 - - -;
#X obj 241 194 sig2float~ 200;
#X obj 239 441 t b f;
#X obj 82 502 print~;
#X obj 82 463 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X obj 239 468 delay 0 1 samps;
#X obj 239 420 nbx 3 14 0 63 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X obj 239 536 display;
#X obj 136 535 display;
#X obj 502 514 vline~;
#X obj 492 445 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 589 469 random 100;
#X obj 589 509 sig~;
#X floatatom 642 509 0 0 0 0 - - -;
#X obj 589 547 print~ SIG;
#X obj 492 545 print~ VLINE;
#X obj 50 145 setdsp~ 1;
#X obj 527 161 sig~;
#X obj 527 114 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X floatatom 527 136 5 0 0 0 - - -, f 5;
#X obj 527 189 display~;
#X obj 589 443 metro 1 1 samps;
#X obj 589 419 loadbang;
#X obj 887 174 loadbang;
#X floatatom 887 331 0 0 0 0 - - -;
#X obj 902 270 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 887 301 vsnapshot~;
#X obj 887 394 nbx 6 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 887 364 / 64;
#X obj 887 237 ramp~;
#X obj 887 205 metro 50;
#X obj 136 466 ramp~ 1 0 64;
#X text 31 265 [snapshot~] can't convert more than one value per block.
For a more precise conversion \, we can use [vsnapshot~]. Below \,
the [ramp~] object from ELSE generates a ramp between 0 to 63 at every
block. With the native [delay] object \, we can Com o objeto [delay]
\, we can delay a bang and convert an exact sample within a block.
See below how that can be done with [vsnapshot~] and how [snapshot~]
can only convert the last sample in the block (63)., f 48;
#X text 103 564 exact sample;
#X text 235 563 only the last one;
#X text 406 40 The native [sig~] object converts control data to audio
signal. But \, as we've seen \, there's an inherent control rate that
prevents more than one control value affecting an audio block., f
48;
#X text 411 227 But then we have the [vline~] object \, which offers
a more accurate convertion. It is mostly a line/envelope generator
as we'll see \, but it can also be used for this type of conversion.
, f 47;
#X text 413 291 Below \, we have [metro] sending bangs at each sample.
We use this to generate random values from 0 to 99 with the native
[random] object., f 47;
#X text 413 344 Click on the bang and see how [vline~] is capable of
generating a block of audio with one random value per sample \, but
[sig~] can only convert the last one., f 47;
#X text 777 71 It is also importsant to understand how graphic objects
in Pd \, when activated via keyboard \, mouse \, always send data in
sync with a block computation. This is why every time we click on the
bang below we get a multiple of 64 and never a value within an audio
block!, f 47;
#X text 802 447 This is nothing but another control rate restriction
we end up having. But also please note that when it comes to data sent
and generated by objects like [metro] and [delay] \, there's no such
restriction., f 44;
#X text 32 18 The native [snapshot~] object converts audio to control
data when it receives a bang \, sent here by the [metro] at a fixed
rate of 200 ms. ELSE has the [sig2float~] object \, which is nothing
but a convenient abstraction that is based in the same idea and objects.
, f 48;
#X text 33 461 click:;
#X text 935 268 <= click;
#X text 475 111 click:;
#X text 442 445 click:;
#X connect 0 0 15 0;
#X connect 1 0 14 0;
#X connect 2 0 4 0;
#X connect 2 0 8 0;
#X connect 4 0 3 0;
#X connect 5 0 4 0;
#X connect 6 0 5 0;
#X connect 8 0 7 0;
#X connect 9 0 12 0;
#X connect 9 1 12 1;
#X connect 11 0 10 0;
#X connect 12 0 1 0;
#X connect 12 0 0 0;
#X connect 13 0 9 0;
#X connect 16 0 22 0;
#X connect 17 0 21 0;
#X connect 17 0 22 0;
#X connect 18 0 19 0;
#X connect 18 0 16 0;
#X connect 18 0 20 0;
#X connect 19 0 21 0;
#X connect 24 0 27 0;
#X connect 25 0 26 0;
#X connect 26 0 24 0;
#X connect 28 0 18 0;
#X connect 29 0 28 0;
#X connect 30 0 37 0;
#X connect 31 0 35 0;
#X connect 32 0 33 0;
#X connect 33 0 31 0;
#X connect 35 0 34 0;
#X connect 36 0 33 0;
#X connect 37 0 36 0;
#X connect 38 0 0 0;
#X connect 38 0 1 0;
#X connect 38 0 10 0;
