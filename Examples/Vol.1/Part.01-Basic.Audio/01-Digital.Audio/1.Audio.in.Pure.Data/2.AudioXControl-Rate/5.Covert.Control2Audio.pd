#N canvas 522 72 472 620 12;
#X declare -path else;
#X obj 145 547 vline~;
#X obj 135 478 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 232 502 random 100;
#X obj 232 542 sig~;
#X floatatom 285 542 0 0 0 0 - - -;
#X obj 232 580 print~ SIG;
#X obj 135 578 print~ VLINE;
#X obj 170 187 sig~;
#X obj 170 140 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X floatatom 170 162 5 0 0 0 - - -;
#X obj 170 215 display~;
#X obj 232 476 metro 1 1 samps;
#X obj 232 452 loadbang;
#X text 49 53 The native [sig~] object converts control data to audio
signal. But \, as we've seen \, there's an inherent control rate that
prevents more than one control value affecting an audio block., f
48;
#X text 54 260 But then we have the [vline~] object \, which offers
a more accurate convertion. It is mostly a line/envelope generator
as we'll see \, but it can also be used for this type of conversion.
, f 47;
#X text 56 324 Below \, we have [metro] sending bangs at each sample.
We use this to generate random values from 0 to 99 with the native
[random] object., f 47;
#X text 56 377 Click on the bang and see how [vline~] is capable of
generating a block of audio with one random value per sample \, but
[sig~] can only convert the last one., f 47;
#X text 118 137 click:;
#X text 85 478 click:;
#X obj 303 149 setdsp~;
#X obj 286 18 declare -path else;
#X connect 0 0 6 0;
#X connect 1 0 5 0;
#X connect 1 0 6 0;
#X connect 2 0 3 0;
#X connect 2 0 0 0;
#X connect 2 0 4 0;
#X connect 3 0 5 0;
#X connect 7 0 10 0;
#X connect 8 0 9 0;
#X connect 9 0 7 0;
#X connect 11 0 2 0;
#X connect 12 0 11 0;
