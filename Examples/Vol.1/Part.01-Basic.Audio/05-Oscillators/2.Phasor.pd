#N canvas 391 44 995 648 12;
#X declare -path else;
#X obj 100 86 cnv 15 300 290 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 133 256 cnv 15 248 110 empty empty empty 20 12 0 14 -220534
-66577 0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-sine 441 float 0;
#X coords 0 1 440 -1 250 112 1 0 0;
#X restore 133 255 graph;
#X text 120 248 1;
#X text 114 356 -1;
#X obj 136 108 cnv 15 248 110 empty empty empty 20 12 0 14 -220534
-66577 0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-phase 441 float 0;
#X coords 0 1 440 0 250 112 1 0 0;
#X restore 135 107 graph;
#X text 120 204 0;
#X text 118 102 1;
#X text 118 153 A;
#X text 118 164 S;
#X text 118 174 E;
#X text 118 291 A;
#X text 118 301 M;
#X text 118 312 P;
#X text 105 159 |;
#X text 107 159 |;
#X text 106 152 ^;
#X text 105 302 |;
#X text 107 302 |;
#X text 106 295 ^;
#N canvas 781 388 321 300 plot 0;
#X obj 127 84 t b f;
#X obj 143 168 sin~;
#X obj 142 113 phasor~ 100;
#X obj 46 103 setdsp~ 1;
#X obj 127 63 initmess 0;
#X obj 105 236 tabwrite~ \$0-phase;
#X obj 127 214 tabwrite~ \$0-sine;
#X connect 0 0 5 0;
#X connect 0 0 6 0;
#X connect 0 1 2 1;
#X connect 1 0 6 0;
#X connect 2 0 1 0;
#X connect 2 0 5 0;
#X connect 4 0 0 0;
#X restore 330 236 pd plot;
#X obj 541 434 cnv 15 344 84 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 699 203 sin~;
#X obj 699 159 phasor~;
#X obj 699 117 sig~ 200;
#X obj 486 248 graph~ 430 17;
#X obj 699 248 graph~ 430 17;
#X text 19 39 In this example we'll implement an oscillator with the
sine function (object [sin~]) and the native [phasor~] object., f
54;
#X text 227 231 time ===>;
#X text 29 480 The [phasor~] object generates a phase signal like the
green graph above. Its output are angles in a linear scale from 0 to
1 \, which represents a full cycle \, but that requires objects that
take that linear input from 0 to 1 as a full cyle such as [cos~] and
[sin~].;
#X text 29 561 The [phasor~] input is a frequency in cycles per second
(or "hertz"). This is a unit of angular velocity and determines how
many times per second we have a full cycle from 0 to 1 \, see the patch
to the right., f 60;
#X text 709 137 <= angular velocity / frequency;
#X text 708 226 <= waveform;
#X text 492 49 The output of [phasor~] never really reaches "1" \,
as it wraps back to "0" \, but note that its cyclical nature implies
that "1" would be the same as 0 \, in the same way that 360° is the
same as 0°, f 62;
#X text 706 179 <= angle position (running phase*);
#X text 550 440 * The [phasor~] output can be referred to as "running
phase". The object takes an angular valocity that defines an increment
phase value for each sample \, which is the step that phase runs at.
, f 46;
#X text 29 396 Above we have two graphs where the horizontal axis represent
time. In the upper one we have phase in the vertical axis \, which
increases at a constant rate \, generating a linear ramp. The lower
graph shows us the resulting sine output \, with amplitude in the vertical
axis.;
#X obj 816 567 sine~;
#X text 562 554 The [sine~] object from the ELSE library is a sinusoidal
oscillator:, f 37;
#X obj 770 15 declare -path else;
#X text 118 128 P;
#X text 118 141 H;
#X connect 23 0 27 0;
#X connect 24 0 23 0;
#X connect 24 0 26 0;
#X connect 25 0 24 0;
