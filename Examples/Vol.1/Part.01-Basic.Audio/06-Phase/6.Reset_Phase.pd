#N canvas 387 119 900 463 12;
#X declare -path else;
#X text 195 197 =;
#X obj 134 200 cos~;
#X msg 277 139 0;
#X obj 134 269 vsl 15 128 -1 1 0 0 empty empty empty 0 -9 0 10 -228856
-1 -1 0 1;
#X obj 134 173 phasor~ 0.2;
#X obj 224 199 osc~ 0.2;
#X obj 224 269 vsl 15 128 -1 1 0 0 empty empty empty 0 -9 0 10 -228856
-1 -1 0 1;
#X msg 628 202 0;
#X obj 598 293 vsl 15 128 -1 1 0 0 empty empty empty 0 -9 0 10 -228856
-1 -1 0 1;
#X text 20 12 The native objects [phasor~] and [osc~] have a right
inlet that accepts control data to reset the phase. This way \, every
time the inlet receives a number from 0 to 1 \, the waveform is resetted
to that initial phase. Bear in mind this is unrelated to the phase
adjustments done previously with phase modulation.;
#X text 103 121 Reset the oscillator to the initial phase of cosine:
, f 28;
#X text 463 57 The [osc~] objet does not allow phase modulation \,
we did this with [phasor~] in the previous examples. Hence \, the structure
wirh [phasor~] and [cos~] allows both processes of modulating the phase
and reseting the oscillator., f 57;
#X obj 598 228 sine~ 0.2;
#X text 463 122 The oscillator objects from the ELSE library also offers
both options. For example \, the second inlet also resets the phase
\, while the third inlet allows phase modulation., f 57;
#X text 658 201 <= reset oscilator;
#X obj 224 236 s2f~;
#X obj 134 236 s2f~;
#X obj 598 260 s2f~;
#X obj 705 18 declare -path else;
#X connect 1 0 16 0;
#X connect 2 0 4 1;
#X connect 2 0 5 1;
#X connect 4 0 1 0;
#X connect 5 0 15 0;
#X connect 7 0 12 1;
#X connect 12 0 17 0;
#X connect 15 0 6 0;
#X connect 16 0 3 0;
#X connect 17 0 8 0;
