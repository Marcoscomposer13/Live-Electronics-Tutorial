#N canvas 417 53 1006 611 12;
#X declare -path else;
#X obj 204 231 samplerate~;
#X obj 204 189 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 204 271 nbx 5 18 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 14
-228856 -1 -1 0 256;
#X obj 651 235 *;
#X floatatom 632 205 0 0 0 0 - - -;
#X floatatom 651 263 0 0 0 0 - - -;
#X floatatom 805 205 0 0 0 0 - - -;
#X floatatom 828 263 0 0 0 0 - - -;
#X obj 828 235 /;
#X obj 132 411 osc~ 440;
#X obj 132 461 out~;
#X obj 669 206 sr~ -khz;
#X obj 846 206 sr~ -khz;
#X obj 642 526 nbx 9 16 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 11
-228856 -1 -1 0.0226757 256;
#X obj 336 270 nbx 5 18 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 14
-228856 -1 -1 44100 256;
#X obj 336 232 sr~ 44100;
#X obj 597 522 *;
#X floatatom 597 491 0 0 0 0 - - -;
#X floatatom 597 549 0 0 0 0 - - -;
#X obj 642 496 sr~ -ms;
#X text 574 553 ms;
#X text 34 18 An audio object operates in a given sample (or audio)
rate., f 65;
#X text 34 40 The native [samplerate~] object gives us the current
sample rate Pd is running on (which can be set in audio settings).
By default \, the sample rate is 44.1 Khz (44100 samples per second).
this is the usual and common sample rate in digital audio., f 65;
#X text 34 107 The [sr~] object from ELSE also gives you the sample
rate \, which is automatically sent out when you load the patch.It
can also let you set the sample rate and give you the sample rate in
different units - check its help file., f 65;
#X text 227 190 <= click;
#X text 56 250 control connection =>;
#X text 142 436 <= audio connection;
#X text 233 496 <= click and drag;
#X text 40 313 In this way \, when the DSP is on \, all audio objects
that output audio generate values for each sample in this given rate.
For instance \, the oscillator below spits 44100 amplitude samples
per second. There's also a difference between audio and control conncetions.
Note that audio connections are thicker., f 63;
#X text 54 533 Note also that the [out~] object also has a toggle that
turns the DSPon or off \, and that when we click and drag the slider
\, it turns the audio engine on if it is off., f 55;
#X text 530 50 Convert between number of samples and time units:;
#X text 748 203 samples;
#X text 595 263 samples;
#X text 592 205 ms *;
#X text 652 300 * 1 second contains 1000 ms.;
#X text 794 264 ms *;
#X text 540 490 samples;
#X obj 775 486 ms2samps;
#X floatatom 865 452 5 0 0 0 - - -;
#X floatatom 775 514 5 0 0 0 - - -;
#X obj 775 539 samps2ms;
#X floatatom 775 565 5 0 0 0 - - -;
#X text 530 76 In digital audio \, we can count time by the number
of samples. This surely depends on the sample rate. To convert miliseconds
(ms) to number of samples \, we just need to multiply it by the sample
rate in Kilohertz (Khz). The opposite conversion is to divide by the
sample rate in Khz. Below \, we use [sr~] \, which can also give you
the sample rate in Khz with the -khz flag.;
#X obj 865 483 ms2samps~;
#X obj 865 509 display~;
#X obj 865 536 samps2ms~;
#X obj 865 562 display~;
#X text 544 345 [sr~] also gives the period of the sample rate in ms
instead of its frequency. This is the period between two samples. By
multiplying the number of samples to this value \, we can also convert
it to ms. But an easier alternative from the ELSE library is with the
[ms2samps] and [samps2ms] or also with [ms2samps~]/[samps2ms~]., f
57;
#X obj 828 12 declare -path else;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 3 0 5 0;
#X connect 4 0 3 0;
#X connect 6 0 8 0;
#X connect 8 0 7 0;
#X connect 9 0 10 0;
#X connect 11 0 3 1;
#X connect 12 0 8 1;
#X connect 13 0 16 1;
#X connect 15 0 14 0;
#X connect 16 0 18 0;
#X connect 17 0 16 0;
#X connect 19 0 13 0;
#X connect 37 0 39 0;
#X connect 38 0 37 0;
#X connect 38 0 43 0;
#X connect 39 0 40 0;
#X connect 40 0 41 0;
#X connect 43 0 44 0;
#X connect 44 0 45 0;
#X connect 45 0 46 0;
