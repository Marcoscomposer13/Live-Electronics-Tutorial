#N canvas 326 70 958 470 12;
#X symbolatom 200 205 10 0 0 0 - - -;
#X text 49 31 The backlash character is used in Pd to escape special
characters. Such characters are \, for instance \, commas \, semicolons
and dollar signs \, which are handled differently in Pd. Another such
character is the backlash character itself., f 59;
#X text 49 109 Hence \, if you type in a symbol box any of these characters
\, you'll see it automatically generates a preceding backlash character.
Pd then undertsands this as a literal character and avoids handling
it in a special way.;
#X obj 149 370 symbol \$0-x;
#X obj 149 343 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X symbolatom 149 411 10 0 0 0 - - -;
#X obj 286 344 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X symbolatom 286 412 10 0 0 0 - - -;
#X obj 286 371 symbol \\\$0-x;
#X text 57 247 We've seen how this can be useful to set a receive name
in a GUI and save it as a literal '\$0' without expanding to the patch
ID number. See below how the symbol to the left gets expanded when
it comes out of the [symbol] object.;
#X obj 548 419 text fromlist example;
#X obj 557 214 text define example;
#X msg 548 329 list Hi \\\, how are you? \\\; Fine \\\, thanks! \\\;
;
#X text 499 29 Here's another example. Below we have a list where commas
and semicolons are escaped and therefore they are not treated as they
normally would. The comma does not separate the message and the semicolon
does not define a send address.;
#X msg 576 371 list \\\$1 is literal and \$1 is not;
#X text 503 116 Hence \, the messages below are properly stored in
the text object \, which is an object that defines and manipulates
texts in Pd.;
#X text 704 214 <= click to open text window;
#X text 556 277 Click on the messages below to see them getting stored
in the [text] object., f 40;
#X connect 3 0 5 0;
#X connect 4 0 3 0;
#X connect 6 0 8 0;
#X connect 8 0 7 0;
#X connect 12 0 10 0;
#X connect 14 0 10 0;
