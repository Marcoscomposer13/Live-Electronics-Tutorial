#N canvas 467 24 637 608 12;
#X declare -path else;
#X obj 342 476 vsl 18 100 0 1 0 0 empty empty empty 0 -9 0 10 -228856
-1 -1 0 1;
#X msg 342 340 0.5;
#X msg 356 369 0 1000 1;
#X obj 322 288 tgl 17 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X msg 322 313 500 \$1;
#X text 370 339 jumps to this value;
#X text 419 369 start \, duration \, target;
#X text 369 312 duration \, target;
#X obj 106 444 vsl 18 100 0 1 0 0 empty empty empty 0 -9 0 10 -228856
-1 -1 0 1;
#X obj 106 332 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 86 72 The [envgen~] object from ELSE is similar to the [vline~]
object as it generate multiple lines \, but it has a quite different
syntax and also other features \, as it is an envelope generator after
all. Let's present it here as a line generator before using it as an
envelope generator in the next examples., f 65;
#X obj 106 366 envgen~ 0 1000 1 250 0.25 250 0.25 500 1 250 1 250 0
, f 26;
#X obj 342 401 envgen~;
#X text 86 152 The line segments are set in pairs of duration and target
value \, which is the opposite of the [line] family of objects from
Pd Vanilla. But if you have an odd number of elements \, the first
float sets a staring point. In the case of a single float \, this is
also true \, but it's the start and end point \, so \, in practical
terms \, it just jumps to that value (like [line]/[line~]/[vline~].
See examples below and check its help file., f 65;
#X obj 342 440 s2f~;
#X obj 106 408 s2f~;
#X obj 403 24 declare -path else;
#X connect 1 0 12 0;
#X connect 2 0 12 0;
#X connect 3 0 4 0;
#X connect 4 0 12 0;
#X connect 9 0 11 0;
#X connect 11 0 15 0;
#X connect 12 0 14 0;
#X connect 14 0 0 0;
#X connect 15 0 8 0;
