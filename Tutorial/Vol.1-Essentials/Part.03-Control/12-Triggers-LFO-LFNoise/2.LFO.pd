#N canvas 336 78 927 424 12;
#X declare -path else;
#X obj 78 221 out~;
#X floatatom 709 174 5 0.1 10 0 - - -;
#X obj 712 224 hsl 128 15 0 127 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 1860 1;
#X obj 709 246 rescale 500 1500;
#X obj 683 295 bp~ 0 10;
#X obj 655 224 noise~;
#X obj 683 332 out~;
#X obj 709 272 nbx 7 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 646.445 256;
#X obj 709 198 lfo 0.1;
#X text 26 292 An audio rate LFO sometimes is not necessary or even
possible. This is why the ELSE library provides [lfo] \, a control
rate LFO object with classical built in waveforms., f 59;
#X obj 558 263 sine~ 0.1;
#X obj 43 144 noise~;
#X obj 101 128 rescale~ 500 1500;
#X obj 101 101 osc~ 0.1;
#X obj 101 156 display~ 7;
#X obj 78 188 vcf~ 10;
#X text 19 23 "LFOs" (Low Frequency Oscilators) are just any oscillator
running at a low frequency \, simple as that! We use them to control
all sorts of parameters in a patch. Below we have a sine wave controlling
the frewquency of a filter.;
#X text 477 73 Below we have the [bp~] bandpass filter \, a native
object that only accepts control messages for its central frequency.
In this case you can't use a signal LFO \, unless you convert from
signal to floats \, using something like [sig2float~]. The [rescale]
object from ELSE is also useful for remapping control data.;
#X text 207 158 The [rescale~] object from ELSE is convenient for rescaling
audio signals into a new control range (here it maps the -1 to 1 input
range to an output range from 500 to 1500)., f 25;
#X obj 468 209 setdsp~;
#X obj 558 298 display~;
#X obj 738 28 declare -path else;
#X connect 1 0 8 0;
#X connect 2 0 3 0;
#X connect 3 0 7 0;
#X connect 4 0 6 0;
#X connect 4 0 6 1;
#X connect 5 0 4 0;
#X connect 7 0 4 1;
#X connect 8 0 2 0;
#X connect 10 0 20 0;
#X connect 11 0 15 0;
#X connect 12 0 14 0;
#X connect 13 0 12 0;
#X connect 14 0 15 1;
#X connect 15 0 0 0;
#X connect 15 1 0 1;
