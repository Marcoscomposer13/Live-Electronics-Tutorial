#N struct 1004-DS float color;
#N struct 1004-fill float color;
#N canvas 102 149 824 398 12;
#X obj 230 298 pointer;
#X obj 105 115 loadbang;
#X msg 105 144 500;
#N canvas 167 397 985 322 template-1 0;
#X obj 611 198 drawpolygon color 20 0 25 95 25;
#X obj 145 270 drawnumber color 100 20 color color=;
#X text 48 153 The [drawnumber] now has more arguments \, besides the
float name to draw we have three number values \, the two firsts are
the "x/y" coordinates (100/20). The third value defines the color of
the number and is defined by the variable name "color". The last argument
is a label for the number display.;
#X text 523 22 And now we include a shape in the data structure object.
This shape is a simple line drawn with the [drawpolygon] object. The
first argument is a float that defines the color. Again \, we use the
"color" float as defined in [struct].;
#X text 523 104 The second argument is the line width of the polygon
in pixels. The next arguments are pairs of point coordinates to connect
with the line. Here we have just two pairs of coordinates (0/25) and
(95/25) - so a line is drawn to connect these two dots., f 56;
#X text 533 247 Note that both the "color" number and the line part
of the same Data Structures template. This means both drawings form
a single graphic object.;
#X text 96 45 Data Structure named "\$0-DS" holding a float called
"color"., f 35;
#X obj 120 107 struct \$0-DS float color;
#X restore 301 120 pd template-1;
#N canvas 976 104 358 171 display-1 1;
#X scalar 1004-DS 500 \;;
#X restore 301 147 pd display-1;
#X msg 263 206 \; pd-display-1 clear \, vis 1, f 12;
#X msg 230 271 traverse pd-display-1 \, bang;
#N canvas 547 174 421 518 template-2 0;
#X obj 67 171 drawnumber color 105 50 color color=;
#X text 53 142 Draw instructions for the "color" float.;
#X text 61 224 here we have a polygon with four coordinate pair points
\, which form a triangle, f 29;
#X obj 50 460 filledpolygon color 0 5 0 105 100 105 50 60;
#X obj 63 286 drawpolygon color 5 0 5 100 5 50 55 0 5;
#X text 54 339 The [filledpolygon] needs an extra first argument to
set the internal color \, and it doesn't need to close the shape with
four coordinate points to draw a triangle - three points is already
enough to draw the shape., f 40;
#X obj 58 98 struct \$0-fill float color;
#X text 58 38 Data Structure named "\$0-fill" holding a float called
"color"., f 31;
#X restore 629 110 pd template-2;
#N canvas 976 317 390 291 display-2 1;
#X scalar 1004-fill 450 \;;
#X restore 629 138 pd display-2;
#X obj 105 175 trigger float bang bang;
#X obj 565 308 pointer;
#X msg 644 217 \; pd-display-2 clear \, vis 1, f 12;
#X obj 486 124 loadbang;
#X msg 565 278 traverse pd-display-2 \, bang;
#X obj 486 184 trigger float bang bang;
#X text 24 25 Now let's have more fun with drawing instructions and
insert a simple line shape with [drawpolygon]. See the [pd template-1]
subpatch. In the [pd display-1] subpatch \, click and drag the number
to see the colors change., f 55;
#X text 438 27 Next \, we draw a bit less simple shapes and also use
the [filledpolygon] object. See the [pd template-1] subpatch for more
details. You can also click and drag the number to change colors.,
f 49;
#X msg 486 153 450;
#X obj 107 330 append \$0-DS color;
#X obj 428 340 append \$0-fill color;
#X connect 0 0 18 1;
#X connect 1 0 2 0;
#X connect 2 0 9 0;
#X connect 6 0 0 0;
#X connect 9 0 18 0;
#X connect 9 1 6 0;
#X connect 9 2 5 0;
#X connect 10 0 19 1;
#X connect 12 0 17 0;
#X connect 13 0 10 0;
#X connect 14 0 19 0;
#X connect 14 1 13 0;
#X connect 14 2 11 0;
#X connect 17 0 14 0;
